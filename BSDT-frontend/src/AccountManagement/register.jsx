import React, { useState } from "react";
import axios from "axios";
import { motion } from "framer-motion";
import "./register.css";
import Navbarhome from "../Homepage/navbarhome";
import { ToastContainer, toast } from "react-toastify";


const Register = () => {
  const [language, setLanguage] = useState("English");
  const toggleLanguage = () =>
    setLanguage((prev) => (prev === "English" ? "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ" : "English"));

  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    email: "",
    password: "",
    confirmPassword: "",
  });

  const [emailError, setEmailError] = useState("");
  const [errorMessage, setErrorMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;

    setFormData({ ...formData, [name]: value });

    if (name === "email") {
      const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
      if (!emailPattern.test(value)) {
        setEmailError(
          language === "English"
            ? "Invalid email address"
            : "‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶Ø‡¶º"
        );
      } else {
        setEmailError("");
      }
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
  
    if (emailError) {
      toast.error(
        language === "English"
          ? "‚ùå Please enter a valid email before submitting."
          : "‚ùå ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶¶‡¶ø‡¶®‡•§",
        { className: "custom-error-toast" }
      );
      return;
    }
  
    if (formData.password !== formData.confirmPassword) {
      const msg =
        language === "English"
          ? "‚ùå Passwords do not match."
          : "‚ùå ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶Æ‡¶ø‡¶≤‡¶õ‡ßá ‡¶®‡¶æ‡•§";
      setErrorMessage(msg);
      toast.error(msg, { className: "custom-error-toast" });
      return;
    }
  
    setIsLoading(true);
  
    try {
      const response = await axios.post("http://localhost:2000/api/register", {
        name: `${formData.firstName} ${formData.lastName}`,
        email: formData.email,
        password: formData.password,
      });
  
      if (response.status === 201) {
        toast.success(
          language === "English"
            ? `üéâ Registered Successfully: Account name: ${formData.firstName} ${formData.lastName}`
            : `üéâ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ${formData.firstName} ${formData.lastName}`,
          { className: "custom-success-toast" }
        );
  
        setTimeout(() => {
          window.location.href = "/login";
        }, 3000);
      }
    } catch (error) {
      const errorMsg =
        error.response?.data?.error ||
        (language === "English"
          ? "‚ùå Something went wrong."
          : "‚ùå ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§");
  
      setErrorMessage(errorMsg);
      toast.error(errorMsg, { className: "custom-error-toast" });
    } finally {
      setIsLoading(false);
    }
  };
  

  return (
    <div className="register-container">
      <Navbarhome />
      <div className="register-wrapper">
        {/* Left Info Card */}
        <motion.div
          className="feature-card"
          initial={{ opacity: 0, x: -40 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8 }}
        >
          {/* Inserted Image */}
          <img
            src="/assets/images/register.png" // ‚úÖ Replace with your actual image path
            alt="Account Benefits"
            className="feature-image"
          />

          <h3>
            {language === "English"
              ? "Why Create an Account?"
              : "‡¶ï‡ßá‡¶® ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá‡¶®?"}
          </h3>

          <ul>
            {language === "English" ? (
              <>
                <li>Create smart surveys effortlessly and share them easily</li>
                <li>Collaborate with your team in real-time</li>
                <li>Access data analysis and charts</li>
                <li>Save progress, track deadlines and manage responses</li>
                <li>Generate reports in English & Bangla</li>
              </>
            ) : (
              <>
                <li>‡¶∏‡¶π‡¶ú‡ßá‡¶á ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶π‡¶ú‡ßá‡¶á ‡¶¨‡¶ø‡¶§‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®</li>
                <li>‡¶¶‡¶≤‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∞‡¶ø‡ßü‡ßá‡¶≤‡¶ü‡¶æ‡¶á‡¶Æ‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶® </li>
                <li>‡¶§‡¶•‡ßç‡¶Ø ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ì ‡¶ó‡ßç‡¶∞‡¶æ‡¶´ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®</li>
                <li>‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£, ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ ‡¶ì ‡¶°‡ßá‡¶°‡¶≤‡¶æ‡¶á‡¶® ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®</li>
                <li>‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ì ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø‡¶§‡ßá ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®</li>
              </>
            )}
          </ul>

          {/* Language Toggle */}
        </motion.div>

        {/* Right Registration Form */}
        <motion.div
          className="register-box"
          initial={{ opacity: 0, y: -50 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 1 }}
        >
          <h2 className="register-title">
            {language === "English"
              ? "Create an Account"
              : "‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®"}
          </h2>
          <form onSubmit={handleSubmit}>
            <div className="name-fields">
              <input
                type="text"
                name="firstName"
                placeholder={
                  language === "English" ? "First Name" : "‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Ö‡¶Ç‡¶∂"
                }
                value={formData.firstName}
                onChange={handleChange}
                required
              />
              <input
                type="text"
                name="lastName"
                placeholder={
                  language === "English" ? "Last Name" : "‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶∂‡ßá‡¶∑ ‡¶Ö‡¶Ç‡¶∂"
                }
                value={formData.lastName}
                onChange={handleChange}
                required
              />
            </div>

            <input
              type="email"
              name="email"
              placeholder={
                language === "English" ? "Email Address" : "‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ"
              }
              value={formData.email}
              onChange={handleChange}
              required
            />
            {emailError && <p className="error-message">{emailError}</p>}

            <input
              type="password"
              name="password"
              placeholder={language === "English" ? "Password" : "‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°"}
              value={formData.password}
              onChange={handleChange}
              required
            />
            <input
              type="password"
              name="confirmPassword"
              placeholder={
                language === "English"
                  ? "Confirm Password"
                  : "‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®"
              }
              value={formData.confirmPassword}
              onChange={handleChange}
              required
            />

            <button type="submit" className="register-button">
              {language === "English" ? "Sign Up" : "‡¶∏‡¶æ‡¶á‡¶® ‡¶Ü‡¶™"}
            </button>
          </form>
          <p className="login-link">
            {language === "English" ? (
              <>
                Already have an account? <a href="/login">Log in</a>
              </>
            ) : (
              <>
                ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá? <a href="/login">‡¶≤‡¶ó ‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</a>
              </>
            )}
          </p>

          <div className="language-toggle-register">
            <label className="switch">
              <input
                type="checkbox"
                onChange={toggleLanguage}
                checked={language === "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ"}
              />
              <span className="slider"></span>
            </label>
            <div className="language-labels">
              <span className={language === "English" ? "active" : ""}>
                English
              </span>
              <span className={language === "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ" ? "active" : ""}>
                ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ
              </span>
            </div>
          </div>
        </motion.div>
      </div>
      <ToastContainer
        position="top-center"
        autoClose={4000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        toastClassName="custom-success-toast"
      />
      {/* 
      {errorMessage && (
        <div className="error-toast">
          {language === "English" ? errorMessage : "‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§"}
        </div>
      )} */}
    </div>
  );
};

export default Register;
